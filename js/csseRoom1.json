{
    "csse": [
        {
            "time": "12:30 PM - 12:45 PM",
            "projectId": "csse-1-1230",
            "title": "Frontend Engineer Internship at BusySquirrels",
            "studentName": "Aram Antonyan",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - BusySquirrels",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Aram Antonyan.jpg",
            "abstract": "Over the summer, for 11 weeks, I worked in BusySquirrels as an intern. BusySquirrels company is web development project that includes website, Chrome extension, and apps for IOS and Android. This company provides their users with easy-to-use cashback, real-time price drop, restock alerts, and different kinds of shopping tips like promo codes, discounts and AmEx offers. Most of the time I worked on Google Chrome extension which gather the information from the shopping website and user can see all the shopping tips and discounts right after he entered the website. In the team we used tools like Slack, Google Meet and GitHub for collaboration and working on new features together. For front-end implementation part I used CSS, HTML, JavaScript on React Framework, and TypeScript. One of my last tasks was on back-end and I utilized Python with the Scrapy library and PowerShell console for running the scripts. Chrome Extension also included a popup message which appear every ten hours by default for particular website, so if you didn’t open a shopping website for ten hours you should see an information about shopping tips without even clicking on the extension tab. The most crucial impact I made for this project for 11 weeks is a feature to control popup off-time for specific website by using indexedDB and reset these setting in the extension menu by deleting a website from chrome database. Following the internship. I was able to learn many JavaScript APIs and one of them is Indexed Database API that helps to create and manage a NoSQL database of JSON objects. By the end of my internship I gained many skills as web developer and I am going to tell about them in more detail in my presentation."
        },
        {
            "time": "12:45 PM - 1:00 PM",
            "projectId": "csse-1-1245",
            "title": "Mobile Apps Engineering @ New Relic",
            "studentName": "Makoto Booth",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - New Relic",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Makoto Quincy Booth.png",
            "abstract": "For my capstone project, I worked at New Relic as a software engineer intern over the summer. New Relic is a San Francisco based technology company which maintains a platform called New Relic One. The platform allows enterprises to monitor and debug their applications throughout their entire software stack. My objectives during the internship were to apply the skills I had acquired through the CSSE curriculum, but also to expand my knowledge of software engineering inapractical environment.\n\nThe majority of my time was spent working with the Mobile Apps team. I wrote code in Kotlin and XML using Android Studio as my primary IDE. I used Gradle to automate builds and an in-house pipeline to facilitate testing and deployment. The tickets I worked on were mostly confined to the New Relic Android application.\n\nWhile I did complete a fair amount of smaller scoped tickets, most of my time was spent on two significant projects. The first was creating a page within the app for users to provide feedback on their experience, in the form of a positive or negative reaction and some text. The second was refactoring a list of server failures present in our synthetics tab to clean up the UI and ensure the implementation conformed to the current architecture of the app. Through developing these projects, I learned much about idiomatic Kotlin code for Android development, clean and responsive UI design, and utilization of the New Relic APIs to fetch different types of data.\n\nI also got great exposure to typical software engineer life: working on an agile team and having daily standups, pairing with other developers and presenting work to project managers, version control with Git and GHE, CI/CD, and using StackOverflow. The team members I worked with helped me not only with direct programming knowledge, but also with techniques to plan out features, break them down into manageable components, minimize technical debt, write performant yet testable code, and to always keep in mind how decisions will impact the customer.\n\nThe two features I developed are in production, and upon completing the internship I received a return offer which I accepted! I am looking forward to rejoining the team in January."
        },
        {
            "time": "1:00 PM - 1:15 PM",
            "projectId": "csse-1-100",
            "title": "Roblox: Observability in a Microservice Platform",
            "studentName": "Isabel Giang",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - Roblox Corp",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Isabel Giang.png",
            "abstract": "I worked as a software engineer intern at Roblox, which is a tech company based in San Mateo, CA. Its main product is Roblox, a platform, storefront, and creation system for multi-player 3D virtual experiences as part of the “metaverse.”\n\nDuring the first half of my internship, as part of the Microservices Platform team, I worked on a component called the Grafana Chart Operator which creates, deploys, and periodically updates monitoring dashboards for every Roblox service. This component uses Jsonnet templates to generate Grafana dashboards, which are uploaded to a Grafana instance in each deployment environment. These Grafana dashboards visualize metrics scraped from each service in curated charts that are intended to provide a “single pane of glass” into a service to help diagnose issues during incidents. \n\nI did not have a traditional intern project - instead I worked as the only engineer maintaining this component.  \n\nWith the support of my mentor, Chris Leroy, I refactored the operator codebase to make it unit testable, added functional tests, added linting and static analysis, closed outstanding bugs, improved and added new Jsonnet templates, made external documentation for common support issues, and made internal documentation for documenting the architecture.\n\nBecause the charts generated by the Grafana Chart Operator relied on metrics generated by common internal libraries, I also worked on improving the instrumentation for these common libraries (i.e Redis client, gRPC middleware) and wrote some proposals for creating a unified instrumentation interface from shared libraries.\n\nLater, I handed off the Grafana Chart Operator to another team, Roblox’s Observability team. I also taught the new maintainers how to test new features, operate, and deploy the Grafana Chart Operator, and continued to provide support after the hand-off was complete. \n\nI also developed a feature to perform a rolling restart of a service on Roblox’s Nomad clusters. This allows users to perform a restart of each allocation of their services, one-by-one, to maintain availability of services while also restoring the service to a healthy state.\n\nOverall, I learned a lot about software at scale and distributed systems. I also learned a lot about the challenges of maintaining software in production: how to manage customer requests and complaints, how to approach cross-team collaboration, how to release features while minimizing regressions, and how to prioritize features while balancing trade-offs between immediate user impact and reliability."        
        },
        {
            "time": "1:15 PM - 1:30 PM",
            "projectId": "csse-1-115",
            "title": "Internship at SolidWorks QA Automation Infrastructure",
            "studentName": "Christopher Hovsepian",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - SolidsWorks",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Christopher Luke Hovsepian.jpg",
            "abstract": "For my Capstone project, I took an internship at SolidWorks with the QA Automation Infrastructure team.  Instead of having one set task to do for the internship, I did a large number of small jobs, which mainly focused on further automating common tasks.  \n\nWe used an automation program called Jenkins to manage the various daily and weekly tests, as well as other tasks, like vRA VM creation, moving VM's to different Jenkins servers, updating the PostgreSQL database, compiling and hosting builds on our internal IIS servers etc.  \n\nMy first job was to take ~25 software installation and registry edit jobs and condense them down to 1 pipeline job, which simplified the VM creation workflow and reduced human error.  \n\nTransferring vRA VM’s from one server to another took 3 Jenkins jobs that had to be done in a specific order, and on the swarm client step if you missed a check box, you would lose the connection from the VM’s to Jenkins forcing you to manually log into each VM one by one and update the swarm client manually.  If you were moving 50 VM’s this could take some time.  I turned the move job into one step that a human could not mess up.  By picking what server you wanted to move to in a drop down menu, the script would know what steps to take, and in what order.\n\nMy internship consisted of many PowerShell and Groovy jobs like this which further automated my teams work flow, reducing human error and speeding them up."        
        },
        {
            "time": "1:30 PM - 1:45 PM",
            "projectId": "csse-1-130",
            "title": "Bazel Dependencies Mirror Proxy",
            "studentName": "David Lam",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - Snap Inc.",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/David Yuen-Seng Lam.png",
            "abstract": "My capstone project is complete through an internship at Snap Inc. with the Mobile Builds team. During my internship, Snap Inc. is migrating to use Bazel, an opensource build and test tool made by Google, as the standard build tool. The main goal of my team is to enhance Bazel and the mobile application infrastructure.\n\nThe main project I worked on is a mirror proxy for 3rd party Bazel dependency fetching. By default, Bazel fetch dependencies directly from links (URL or Git origin) specified by developer. This method is undesirable in cooperate environment because builds can fail if the external service (e.g. Github) providing the dependency becomes unavailable. The goal of the project is to all redirect 3rd party dependency request from external services to internal storage, which ensure the safety and reliability of dependency fetching process.\n\nAt the end of the internship, I successfully launch a HTTP mirror proxy to production environment and apply it to a small Bazel repository as the initial rollout. Other than the main project, I also work on 2 side projects. The first side project is adding wildcard support to .bazelignore file. The second side project is intergating Bazel tests to the flaky test management system.\n\nFrom the internship, I have gain industrial experience on improving large scale systems and infrastructures. Other than technical skills, I improved my communication skills through presenting my solution to team members and discussing implementation details in code review iterations. In addition, learning about other team members’ project extended my knowledge about the mobile application and internal tools development."        
        },
        {
            "time": "1:45 PM - 2:00 PM",
            "projectId": "csse-1-145",
            "title": "AccessMap: An Accessible Pedestrian App",
            "studentName": "Jay Lin",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - Taskar Center",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Jay Lin.png",
            "abstract": "Pedestrians with mobile disabilities often face barriers such as uncut curbs and overly steep hills. Currently, there is no routing application that adequately considers the accessibility of footpaths. AccessMap is a pedestrian navigation application on iOS and Android devices. AccessMap aims to provide smart routing services and accessible representations of geographical features to assist people with or without disabilities in planning their trips.\n\nMy focus was to develop the mobile application independently on top of existing code. I taught myself to use React Native to display the user interface, conduct usability testing, and collaborated with a designer. To fix accessibility issues, I utilized my experience with screen readers to detect issues with alternative text, element navigability and size, and text contrast. I worked off existing code to incorporate visual map data from MapBox. This involved showing details such as incline, presence of curb cuts, and marked crossings, real-time public transportation, and using an existing routing algorithm that considers the user’s accessibility preferences. 3 rounds of user testing involving over 20 users revealed inaccessibility for colorblind users in map design, leading my team to consider using distinct shapes instead of colors to represent sidewalk steepness, as well as revealing app state bugs and UI problems to fix for a future release.\n\nAs a result, I successfully uploaded the app to the Apple Store and Google Play Store. This public release is significant in that it will benefit users who rely on accessible pedestrian travel. I learned key design principles for accessibility, created modular and interactive user interface components, and pushed a working application to production. Working at The Taskar Center for Accessible Technology has been a fun experience and I will continue working with them after my capstone has ended to develop a multimodal routing feature."        
        },
        {
            "time": "2:00 PM - 2:15 PM",
            "projectId": "csse-1-200",
            "title": "Providing Automated Feedback on Programming Assignments",
            "studentName": "An Nguyen",
            "studentMajor": "CSSE",
            "projectType": "UWB CSS Faculty Research",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/An Hoang Phuong Nguyen.png",
            "abstract": "I have been a grader and a teacher’s assistant for CSS 142 Computer Programming I since January 2019. The majority of students in CSS 142 have little or no experience in programming, and they rarely get detailed feedback on their code from instructors and graders due to their limited time. Therefore, Ed Adshire, Margaret Lanphere, Jeremy Zhang, and I developed an automatic system under Dr. Yusuf Pisan's guidance. \n\nThe goal is to give instant feedback to beginner students so that they can learn, develop, and improve their code. My team and I built a system on Github classroom that runs using the GitHub Actions workflows. The Python script runs the unit tests and generates the result to test reports. The Github workflow runs 3 different tasks: CheckStyle checker, Misspell, and the python script. Then, it produces reports on program quality within 2 minutes after submission. For students who have never programmed before and need feedback, this program is very valuable since professors and assistants do not have the time to review every assignment. Additionally, students learn how to work with Git/GitHub and version control. With the autograding feature, students can enjoy studying more with less grade anxiety, and instructors can save grading time. Moreover, instructors can easily see each student’s contribution through GitHub version control. They can manage students and re-use assignments with minimal setup through GitHub Classroom. \n\nIn June 2021, we completed the system, unit tests, and materials to test in 1 assignment of CSS 143 course. In Fall 2021, we used the system in the CSS 142 D taught by Professor Pisan. In the first two weeks, students struggled to learn and understand the feedback. After that, most students were able to take advantage of it and improve their code. After using the system, there was a good improvement in code style and quality. However, to work with current assignments, the system required an exact format and template to test, which restricted student’s creativity. Automated feedback provides valuable feedback to students, but to make it more effective, we need to rewrite some assignments and improve unit tests. "        
        },
        {
            "time": "2:15 PM - 2:30 PM",
            "projectId": "csse-1-215",
            "title": "Internship at 2K/Cat Daddy Games",
            "studentName": "Dane Ojala",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - Cat Daddy Games",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Dane Emery Ojala.png",
            "abstract": "For my capstone, I did a 3 month internship at Cat Daddy Games, a subsidiary of 2K Games.\n\nI joined a team of around 10 software engineers, working on monthly updates for a popular mobile game. We worked closely with a larger team including back-end developers, artists, gameplay designers, and QA testers. The team was trying to make a big splash with a new update to the WWE Supercard mobile game, to drive back old players and bring in new ones.\n\nDuring this internship, I used Visual Studio to write and debug both C# and C++ code (for the server and client code respectively), as well as Perforce for source control and Favro to keep track of tasks and help facilitate collaboration.\n\nOnce I was familiar with the tools and codebase, I was tasked to overhaul one of the game’s major card types in order to create a big splash for a new season launch. To accomplish this task, I would need to change code all throughout the title, both client-side and server-side. Throughout the project, I worked closely with various members of my multi-disciplinary team in order to achieve goals. Changes that I made required the support of various artists and UI designers. I also worked with the QA team to fix new bugs as they discovered them.\n\nOne problem that I encountered was that the new card changes would require sending additional data between the game’s server and the client. I had to make sure that both the client and the server had safeguards in place to ensure only the correct cards were able to receive updated stats from the server. \n\nRecently, the major update I worked on went live. All in all, it was a successful product launch, and the aspects of the game that I worked on helped to contribute to an exciting new update. \n\nDuring this internship, I was able to learn quite a bit about software design, as well as more about the basics of server-client communication. In the process, I learned a lot about effective communication, problem-solving, and software development.\n\nAt the end of the initial 3 months, I was offered a position at the company! I’m currently working there part-time as I finish school, with the intention to move to full-time once I finish my degree."        
        },
        {
            "time": "2:30 PM - 2:45 PM",
            "projectId": "csse-1-230",
            "title": "Providing Automated Feedback on Programming Assignments",
            "studentName": "Jeremy Zhang",
            "studentMajor": "CSSE",
            "projectType": "UWB CSS Faculty Research",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Jeremy Kwock Zhang.png",
            "abstract": "Computer science education is a fast-pace growing field. As part of the holistic approach, programming courses at University of Washington Bothell (UWB) assign regular programming assignments to gauge student learning and to reinforce concepts learned in lectures. With dozens of students in each course offering, assessing student work becomes more time consuming. Instructors have to devote their time away from teaching to not only to develop assignments, but also to grade the work that comes in at the end of each assignment workflow cycle. UWB is fortunate enough to be able to hire graders for many of their programming courses. However, the time of the grader is still precious and very limited. Grading each student may take upwards of an hour or even more.\n\nWith previous experience as a teaching assistant at the Paul G. Allen of Computer Science & Engineering, I have taken an interest to join Professor Pisan’s Teaching for Good team to develop an automated assignment feedback system for Autumn 2021 CSS 142. CSS 142 is the first of the many programming classes a student may take for their computing degree. In this class, there are eight programming assignments, assigned roughly at weekly intervals. The assignments are built at an increasing difficulty to aid student learning and cover a plethora of topics.\n\nAs part of my capstone, I collaborated with a team of colleagues to ensure that students obtain a timely feedback of their assignments while also ensuring that the process is as smooth as possible. We have chosen GitHub as a platform for our delivery method for students to obtain their assignment feedback. Students will be able to push their code onto the GitHub platform and to obtain immediate feedback. The feedback report includes helpful information such as whether their code works as expected according to the assignment specifications, adhering to code quality guidelines, and spell checking. Overall the goal of this project is to relieve the stress of grading student work while also assuring that the submissions from the class are of the highest quality."        
        }, 
        {
            "time": "2:45 PM - 3:00 PM",
            "projectId": "csse-1-245",
            "title": "Alaska Airlines Software Engineer Internship",
            "studentName": "Adrian Unruh",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - Alaska Airlines",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Adrian Ray-An Unruh.jpg",
            "abstract": "Alaska Airlines is a company that invests heavily in data science and predictive modelling technology which contributes to it consistently being one of the best performing airlines in the United States. During my internship at Alaska Airlines, I worked with various data engineering and software engineering technologies to feed data analytics operations to predict flight loads.\n\nAlaska Airlines wants to predict the flight load more accurately on any given flight in the future so they can more efficiently staff each flight with the required number of employees. More accurate staffing leads to less waste in person hours paid from the company and to higher customer satisfaction.\n\nThe application would use machine learning models to predict the flight load on future dates, then automatically plan staffing numbers for each flight. Creating accurate machine learning models requires a massive amount of data ingestion. Contributing to the development of data ingestion pipelines was the main role of my internship. \n\nOne dataset that I built data pipelines for was flight information including flight numbers, times, ticket costs, flight loads, etc. And the second was business analyst data ingestion so business analysts could input certain fields to manipulate the creation of the machine learning models. I wrote code using Python, Apache Spark, and Kedro for the pipelines, then deployed them to Azure Databricks so they could be triggered in production. I used C# and .NET Core to build backend APIs to ingest data from business analysts in a web application.\n\nKedro is a data pipelining framework for Python that modularizes and abstracts the data transformation logic away from the pipeline itself. This made it perfect for maintaining large scale data ingestion operations. Our team used Apache Spark and Azure Databricks because it had efficient integrations with Azure datalake and other services that were in use.\n\nMy internship ended while the effort was still ongoing. However, I will be returning to Alaska Airlines after graduation to continue contributing to the operation."        
        },
        {
            "time": "3:00 PM - 3:15 PM",
            "projectId": "csse-1-245",
            "title": "Crafting Programming Lessons to Support Software Engineers",
            "studentName": "Ginger Rabun",
            "studentMajor": "CSSE",
            "projectType": "UWB Faculty Research",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/Ginger A. Rabun.png",
            "abstract": "My college career has been a journey. A complicated, non-linear progression over the past 6 or 7 years. I learned so much about software and computer science, and most importantly, myself. I often judged my own accomplishments harshly because I seemed to spend more time and energy completing them than my fellow classmates. Those judgements come from a flawed place that doesn't account for the different life experiences we have, or how they influence our techniques and goals. \n\nOne of the most important things these years have taught me is that not everyone approaches a problem in the same way, and this diversity of thought is a good thing. Some will focus on finding a straight-forward solution and delivering results quickly; others will explore the boundaries of the problem and determine how to avoid issues that might arise in special circumstances. There are even those who challenge themselves to solve a problem using impractical tools, just to see if it’s possible. Every solution gathers useful information and contributes to our overall understanding of the problem.\n\nThe T4G Leet Programming project builds on this principle by empowering a diverse group of computer science students to share their process when tackling a variety of programming questions that might be asked in a technical interview. To fully explain the premise of the question and how to approach answering it, we must also go over the underlying computer science principles. The process of researching and summarizing this information improves the author’s understanding of each concept, and that knowledge is passed on to the reader through our collection of step-by-step lessons, each focused on a question drawn from Leetcode.com. This Stepik course is a helpful resource for students and professionals who want to hone their programming and problem-solving skills, especially those preparing for technical interviews.\n\nIn the lessons I reviewed, I first tried to solve the problem as the reader would, noticing possible points of confusion that needed clarification. Then I looked at the lesson itself and determined whether those points had been addressed clearly in their explanation. I discovered a lack of visual learning aids, which are very beneficial to (and maybe even necessary for) my understanding, as well as the understanding of many other students. So, in the lessons I authored, I focused on creating images that complement the written parts of my explanation, enhancing the learning experience for those of us that struggle to follow along with words alone. My contributions were focused on improving the quality and depth of a small number of lessons, while others focused on producing a large number of shorter lessons. Both approaches are essential to the project, because together they allow us to cover many different programming questions that require varying levels of expertise and explanation. "        
        },
        {
            "time": "3:15 PM - 3:30 PM",
            "projectId": "csse-1-300",
            "title": "Business Process Automation",
            "studentName": "Abdirahman Hassan",
            "studentMajor": "CSSE",
            "projectType": "Sponsored Internship - Amazon Web Services",
            "facultyAdvisor": "Dr. Yang Peng",
            "posterLink": "./posters/csse/Abdirahman M Sr Hassan.PNG",
            "abstract": "In Summer 2021, I interned at Amazon as a software developer. I was part of a team called BlackMirror, under AWS’s CloudWatch team.  The team provides monitoring services that enable the users to keep track of the activities related to the usage of Amazon Web Services. Users can collect, track, and log their metrics.\n\nThe first three weeks of my internship were onboarding through training and self-service offerings to get hands-on experience with different tools and techniques while developing personal and professional networks by being part of intern events and workshops. From the fourth week to the end of my internship, I worked on my project to enhance user experiences when using the BlackMirror website and automate business processes to reduce the support tickets that the team received. The team needed to tackle two problems. The first problem that needed to be addressed was that the users did not have access to all metrics while using the website. The second problem was that the website did not provide granular search functionality for the users. The solution involved adding new functionality to the APIs the website uses. The work on the project involved designing a solution that required writing a report that describes the architecture of the solution, technologies that will be used, and future improvement that could be done and then setting up a design review with the team to have clear and agreed-upon goals. For the implementation phase, I used XML to define the structure and behavior of the API, and Java to implement those behaviors.\n\nWhile working on the project, I improved my technical skills, such as expanding my knowledge of git and Java, learning how to design APIs, and learning how to do unit testing using Junit and Mockito. I also learned how to use the Coral explorer framework for integration testing. I also improved my soft skills such as teamwork, problem-solving, communication, adaptability, and time management."        
        }                    
    ]
}